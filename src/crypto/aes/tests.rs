use crate::crypto::aes::{common, openssl, rust_crypto};


const RAW_KEY: [u8; 256] = [
    187, 145, 125, 107, 189,  88, 156, 113,  24, 246, 230, 254, 177, 111, 214,  52,
     67, 102,  59, 216, 238, 205,  51, 103, 236, 139, 172,  12, 150,  79,  53, 141,
    161, 251,  13,   2,  34, 127, 171, 166, 190,  49, 224,  20,  69, 140,  18, 101,
    126,  99, 120,  40, 152, 109, 229,  37,   1,  75, 193, 227,  78, 112, 247,  25,
     38, 232, 239, 175, 213, 181,  46,  90, 108, 157, 142,  97,  76, 138, 147, 130,
      5, 255, 135, 134, 104,  96,  98, 129,  95,  31, 119,   4, 159, 242,  14, 131,
     91,   0, 137,  29, 188,  41, 132, 117, 194, 203,  54, 199, 114,  16, 169, 212,
    225,  93,  60, 208, 198,  26,  89, 116,  58,  87, 204, 168, 237,  45,  27, 115,
    218,  48,  42, 143,   9,  92,  56, 121, 210,  30,  64, 244, 228, 235, 241, 186,
    176, 151, 215,  35, 128, 243,  33, 123,   6, 196,  80,  28, 200,  50,  19,  39,
      7, 146,  77, 122, 153, 174,  57, 124, 100,  61,  83,  55, 234,  11, 182,   3,
    191, 178, 105,  15,  62, 170, 106,  23, 180,  74,  21,  86,  70, 173, 219, 185,
    207,  73, 110, 184,  82, 252,  72, 217,  71, 209,  32, 155, 195, 160, 163,  17,
     10, 118, 144, 202,  63, 221, 179, 226, 148, 206,   8,  43, 201,  66, 149, 248,
     36,  81,  22, 183, 197, 250, 249, 133,  84, 253, 164, 165, 158, 154, 222, 220,
    162,  94, 245,  68,  47, 167, 192,  65, 136, 231,  44, 223, 240,  85, 233, 211,
];

const MSG_KEY: i128 = 0x6ef8539b08e581717a9a9812a2a84959;

const DATA_LEN: usize = 160;
const DATA: [u8; DATA_LEN] = [
    145, 116, 154, 234, 225,  42, 110,  20,  65, 210,  76, 212, 200,  73, 177,  45,
    153, 194, 183,  61, 136, 155, 146,  74, 179,  68,  81, 115,  39, 180, 176, 252,
     23, 235,  19, 111,  93,  12,  18, 150,  78, 105, 130, 195, 112, 114, 186, 203,
     17, 211,  69, 251, 199, 255, 134, 237,  40,   1, 213, 101,  15, 247, 164,  83,
     46, 253, 125, 143, 182,   9,  60, 102,  49, 227,  77, 118, 126, 215,  43,  96,
    168,  32, 103,  29, 117,  52, 170,  92,  48,  44, 133, 205,  89,  53,  11, 224,
    187, 196, 106,  50,  58,  36,  57, 124, 128, 239,  38, 121, 159, 208,  91, 230,
     88, 158, 250, 149, 217, 202, 165, 144,  24, 249, 226,   7,  21,  26, 123, 222,
    209, 197, 100, 135,  90,  87, 139,  47,   4, 233, 171,  63, 148,   5, 244,  85,
    232,  27,   0, 119,  54,  66, 241,  70,  14,  31, 174, 161, 206, 236,  10,  37,
];


macro_rules! calc_aes_params {
    ($($name:ident => $expected:expr,)+) => {
        $(
            #[test]
            fn $name() {
                const EXPECTED: common::AesParams = $expected;
                let res = common::$name(&RAW_KEY, MSG_KEY).unwrap();

                assert_eq!(res.key, EXPECTED.key);
                assert_eq!(res.iv, EXPECTED.iv);
            }
        )+
    };
}

calc_aes_params! {
    calc_aes_params_encrypt_v1 => common::AesParams {
        key: [
             97,  31, 168, 169,  59,  34, 249, 116,
             65, 218,  20, 149, 174,  28,  26,  30,
             15, 155, 124, 209,  79, 156, 116, 210,
             42, 140, 247, 162, 133,  75,  60, 116,
        ],
        iv: [
            110,  86, 161, 174,  40, 189,   3, 152,
            220, 162, 199,   9, 219,  90, 194,   3,
            217, 140, 165, 196,  79,  90,  91,  92,
             12,  83, 229,  72,  23, 222, 253, 149,
        ],
    },
    calc_aes_params_decrypt_v1 => common::AesParams {
        key: [
             35,  90, 138, 102, 182, 119,  96, 193,
            134, 249, 212, 124,  49, 124, 162, 128,
             26, 134,  29,  50,   8, 185, 196, 208,
            118, 215, 123,  22, 224,   0, 192,  58,
        ],
        iv: [
            227,  61, 195, 104, 255, 212, 169, 103,
            182,  64,  16, 242, 216, 159,  59, 181,
            111, 180, 240, 204,   2, 110, 240,  53,
             35, 118,  78, 127, 142, 168,  99,  93,
        ],
    },
    calc_aes_params_encrypt_v2 => common::AesParams {
        key: [
             33,  51,  50, 111, 141,  88, 110,  20,
            142,  37,  33,   3, 133, 242,  62, 255,
            182, 213, 240,  41,   6,  57, 171,  56,
            189,  69,  68,  43,  40,  13, 131,   1,
        ],
        iv: [
            137, 252,  92, 253, 170,  95, 118, 161,
            130,  38, 233, 126,   3,  94, 124, 208,
            160, 185,  37,   5,  94, 140,  86,  36,
             55, 220, 194,   3, 201,  18,  56,  14,
        ],
    },
    calc_aes_params_decrypt_v2 => common::AesParams {
        key: [
            208, 195,  13, 178, 233, 107, 231,  87,
            131,  63, 243, 107, 102, 153, 175, 117,
            238, 220, 194, 122, 116, 255, 224, 122,
              9, 213,  13, 178, 196,  34, 227, 238,
        ],
        iv: [
            120, 141,  31, 195, 122, 142, 182, 175,
             45, 131, 187,  73, 166, 169, 251, 173,
             14,  98,  93, 238, 188, 116,  95, 222,
             45, 170, 167, 219, 145,  88, 211, 143,
        ],
    },
}


macro_rules! aes_ige {
    ($($name:ident => $calc_aes_params:ident, $aes_ige:ident, $expected:expr;)+) => {
        $(
            #[test]
            fn $name() {
                const EXPECTED: [u8; DATA_LEN] = $expected;

                let aes_params = common::$calc_aes_params(&RAW_KEY, MSG_KEY).unwrap();
                let res_openssl = openssl::$aes_ige(&aes_params, &DATA);
                let res_rust_crypto = rust_crypto::$aes_ige(&aes_params, &DATA);

                assert_eq!(res_openssl[..], EXPECTED[..]);
                assert_eq!(res_rust_crypto[..], EXPECTED[..]);
                assert_eq!(res_openssl, res_rust_crypto);
            }
        )+
    };
}

aes_ige! {
    aes_ige_encrypt_v1 => calc_aes_params_encrypt_v1, aes_ige_encrypt, [
         68,  17, 227, 174,  30, 228, 187,  75, 164,  59, 119, 241, 164, 131,  30, 105,
        216, 151, 148,  45, 126, 137, 234,  93, 223,  42,  87, 233, 239, 159,  86,  28,
         18, 168, 221,  76, 150, 149,  20, 227, 171,  98, 164, 119, 153, 199,  16, 146,
         44, 183, 165, 107,  35, 252, 187, 119,  36,  25, 250, 166, 174,  80,  58, 174,
         10, 136, 104, 203, 102, 164, 140, 128, 155,  29, 163,  45, 112, 236,  83, 232,
        160, 159, 253,  70, 109, 238,  36, 144, 221, 244, 195, 154, 216, 129,  58, 228,
         74,  49, 206,  94,  73, 202, 172,  52, 219, 170, 153, 137,  64, 215,  90, 132,
         81, 156, 254,  62,   4,  87, 177,  83, 157,  72, 142, 252,  11, 106, 198, 233,
        114, 193,  79, 150, 167,   2,  28,  21,  67, 239, 167, 120, 214,  68, 192,  23,
         11, 249, 253,  36, 164, 194, 213, 251, 216,   2,  37,  66,  63, 204, 216, 194,
    ];
    aes_ige_decrypt_v1 => calc_aes_params_decrypt_v1, aes_ige_decrypt, [
        133, 174,  33,  30,  19,  22,  20, 153,  74, 160, 175,  80, 116, 249, 230,  42,
         63,  88, 162, 152, 110,  53,  48, 249,  97, 244, 200,  49,  98,  60, 125, 246,
        173, 112,  16,  78, 157,  55, 238, 147, 116,  78, 130,  34, 235, 146, 126, 155,
         93, 214, 142,  86, 170,  37,  12, 227, 167, 196, 201, 108, 137, 136, 148,  42,
        234, 239, 193, 246, 112, 123,  95, 166,  55, 197, 100,  39,  44, 147,  60, 181,
        198,   1,  86,   5, 199,   3,  23, 187, 135,  46, 222,  69, 142,   5, 208, 211,
         39, 199,  36, 146, 172,  24,  55,  33, 209, 135,  27, 155,  50, 101, 126, 101,
        149,  91,  45, 140, 151, 192,  30, 195, 113,  62, 103,  30,  88,  34,  63, 195,
        161, 187, 198,  26, 159, 232, 168, 227,  44, 127, 200,  85, 195, 191, 221,  66,
        153, 254, 187,  70,   5, 176, 228, 176,  99, 101,  10,  96,  37, 119,  10, 147,
    ];
    aes_ige_encrypt_v2 => calc_aes_params_encrypt_v2, aes_ige_encrypt, [
         20, 230, 181, 167, 146,  80, 195,  36, 132,   1, 127,  54, 193, 148, 144, 252,
        212,  73, 207, 176, 133, 215, 211,  80, 117, 181, 180,  30,  77, 236, 106, 100,
        201, 249,  11,  32,  77,  64, 216,  78,  49,  12,  96, 244, 156, 104, 222, 224,
         66, 181, 129, 128, 110, 224, 186, 131, 252,  60,  32,  44, 126,  21, 218, 176,
         58, 120, 169, 222, 150, 152, 210,  81, 157,  97,  48, 141, 117, 137,  65, 244,
        223,  47,  96,  40,  42,  25, 215,  76, 137, 227,  54, 182,  21,  23, 251, 173,
         87, 168, 230,  97,  28, 149, 171,  83, 199, 119, 113,  87, 208, 157,  82,  46,
        163, 210, 228,  45, 168, 150, 163,  40,  75, 117,  44,  21, 128, 105, 136,  94,
         26,  86, 183, 126, 252, 160, 253, 215, 178,   2, 174,  76,  34, 160, 188,  57,
        231, 110, 215,  42,  20, 130,  28, 211,  37, 160, 207,  94, 203, 174, 145,  55,
    ];
    aes_ige_decrypt_v2 => calc_aes_params_decrypt_v2, aes_ige_decrypt, [
        218, 228,  74,  64,  32, 212, 189, 183,  99, 234, 208, 198, 167, 127,  28, 242,
         44, 134, 247, 108, 157,   4,  15, 110, 138, 133, 216,  79, 140,  81,  71, 212,
        200, 229, 126, 197, 155, 192, 101, 187, 208,   8,  40, 126, 250, 251,  55, 162,
        215,  71, 219,  32, 139,  28, 214,  26, 156,  50,  92,  32,  88, 220, 204, 225,
         89,  47,  18, 150, 217, 230, 113,  69, 126, 201,  17, 120, 187,  58, 234,  31,
         58, 235, 252, 127, 151, 200,  15, 183, 214,  24, 231, 146, 106,  27, 125, 227,
         52, 101,  27, 129,   3,  39, 174,  91,  22, 203, 125, 123, 179, 151, 254,  63,
        168, 247, 243,  66, 200,  61,  21, 225,  27, 214, 147,  33,  11, 254, 105,  38,
        151, 243, 211, 208, 182,  88,  46,  35, 149,  20, 122,   8,  21, 199, 232, 113,
        102, 238, 106,  42, 201,  49, 152,  99,  94,  20, 160, 124,  56, 192,   3, 112,
    ];
}
